/**
 * Yoola - Content Script
 * This script runs in the context of web pages to detect and extract Terms of Service content
 */

// Prevent duplicate declarations
if (typeof window.YoolaContentScript === 'undefined') {
  // Define the content script class
  window.YoolaContentScript = class {
    constructor() {
      this.initialized = false;
      this.termsPatterns = [
        /terms\s*of\s*service/i,
        /terms\s*of\s*use/i,
        /user\s*agreement/i,
        /legal\s*terms/i,
        /privacy\s*policy/i,
        /eula/i,
        /end\s*user\s*license\s*agreement/i
      ];
      
      this.loadingOverlay = null;
      this.currentLanguage = null;
      
      this.init();
    }

  init() {
    if (this.initialized) return;
    
    // Listen for messages from the background script
    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
      try {
        if (message.action === 'extractContent') {
          const content = this.extractPageContent();
          sendResponse({ content });
        } else if (message.action === 'showSummary') {
          this.showSummary(message.summary);
          sendResponse({ success: true });
        } else if (message.action === 'detectTermsLinks') {
          const links = this.findTermsLinks();
          sendResponse({ links });
        } else if (message.action === 'showLoadingOverlay') {
          this.showLoadingOverlay(message.message || 'Loading...');
          sendResponse({ success: true });
        } else if (message.action === 'updateLoadingStatus') {
          this.updateLoadingStatus(message.message || 'Processing...');
          sendResponse({ success: true });
        } else if (message.action === 'hideLoadingOverlay') {
          this.hideLoadingOverlay();
          sendResponse({ success: true });
        }
        return true; // Keep the message channel open for async responses
      } catch (error) {
        console.error('Error handling message in content script:', error);
        sendResponse({ error: error.message });
        return true;
      }
    });

    // Mark the links to Terms of Service on page load
    try {
      this.highlightTermsLinks();
    } catch (error) {
      console.error('Error highlighting terms links:', error);
    }
    
    // Load the user's preferred language
    try {
      chrome.storage.sync.get(['preferredLanguage'], (result) => {
        this.currentLanguage = result.preferredLanguage || 'English';
      });
    } catch (error) {
      console.error('Error getting preferred language:', error);
      this.currentLanguage = 'English'; // Default fallback
    }
    
    this.initialized = true;
    console.log('Yoola content script initialized');
  }

  /**
   * Extract content from the current page
   * This attempts to identify and extract only the relevant terms of service text
   */
  extractPageContent() {
    // First try to find the main content area
    const article = document.querySelector('article');
    const main = document.querySelector('main');
    const contentDiv = document.querySelector('.content, #content, .terms, #terms');
    
    let contentElement = article || main || contentDiv || document.body;
    
    // If we're on a frame with very little content, use the parent document
    if (contentElement.textContent.trim().length < 1000 && window !== window.top) {
      return { 
        error: 'Content too short, may be in a frame',
        isFrame: true
      };
    }
    
    return {
      domain: window.location.hostname,
      url: window.location.href,
      title: document.title,
      content: contentElement.textContent.trim()
    };
  }

  /**
   * Find links that might point to Terms of Service pages
   */
  findTermsLinks() {
    const links = [];
    const allLinks = document.querySelectorAll('a');
    
    allLinks.forEach(link => {
      const href = link.getAttribute('href');
      const text = link.textContent.toLowerCase();
      
      if (!href) return;
      
      // Check if the link text matches common terms patterns
      const isTermsLink = this.termsPatterns.some(pattern => pattern.test(text));
      
      if (isTermsLink) {
        links.push({
          href: href,
          text: link.textContent.trim(),
          x: link.getBoundingClientRect().left + window.scrollX,
          y: link.getBoundingClientRect().top + window.scrollY
        });
      }
    });
    
    return links;
  }

  /**
   * Add visual indicators to terms links
   */
  highlightTermsLinks() {
    const links = this.findTermsLinks();
    
    links.forEach(linkInfo => {
      const elementsAtPoint = document.elementsFromPoint(linkInfo.x, linkInfo.y);
      const linkElement = elementsAtPoint.find(el => el.tagName === 'A');
      
      if (linkElement) {
        linkElement.classList.add('yoola-terms-link');
        // Create a small icon next to the link
        const icon = document.createElement('span');
        icon.classList.add('yoola-terms-icon');
        icon.innerHTML = '📝';
        icon.title = 'Summarize with Yoola';
        icon.style.marginLeft = '4px';
        icon.style.cursor = 'pointer';
        icon.style.fontSize = '14px';
        
        icon.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          // Tell the background script to follow this link and get terms
          chrome.runtime.sendMessage({
            action: 'summarizeTermsLink',
            url: linkElement.href
          });
        });
        
        linkElement.parentNode.insertBefore(icon, linkElement.nextSibling);
      }
    });
  }

  /**
   * Shows a loading overlay while waiting for the API
   */
  showLoadingOverlay(message) {
    // Remove any existing overlays first
    this.hideLoadingOverlay();
    
    // Create the loading overlay
    const overlay = document.createElement('div');
    overlay.id = 'yoola-loading-overlay';
    overlay.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.7);
      z-index: 10000;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      font-family: Arial, sans-serif;
      color: white;
    `;
    
    // Create spinner
    const spinner = document.createElement('div');
    spinner.style.cssText = `
      width: 40px;
      height: 40px;
      margin-bottom: 20px;
      border: 4px solid rgba(255, 255, 255, 0.3);
      border-radius: 50%;
      border-top-color: white;
      animation: yoola-spin 1s linear infinite;
    `;
    
    // Add animation style
    const style = document.createElement('style');
    style.textContent = `
      @keyframes yoola-spin {
        to { transform: rotate(360deg); }
      }
    `;
    document.head.appendChild(style);
    
    // Add message
    const messageElem = document.createElement('div');
    messageElem.id = 'yoola-loading-message';
    messageElem.textContent = message;
    messageElem.style.cssText = `
      font-size: 16px;
      font-weight: bold;
      margin-bottom: 10px;
      text-align: center;
      max-width: 80%;
    `;
    
    // Add cancel button
    const cancelButton = document.createElement('button');
    cancelButton.textContent = 'Cancel';
    cancelButton.style.cssText = `
      margin-top: 20px;
      padding: 8px 16px;
      background-color: transparent;
      border: 1px solid white;
      color: white;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
    `;
    cancelButton.addEventListener('click', () => this.hideLoadingOverlay());
    
    overlay.appendChild(messageElem);
    overlay.appendChild(spinner);
    overlay.appendChild(cancelButton);
    document.body.appendChild(overlay);
    
    this.loadingOverlay = overlay;
  }
  
  /**
   * Updates the loading status message
   */
  updateLoadingStatus(message) {
    if (this.loadingOverlay) {
      const messageElem = document.getElementById('yoola-loading-message');
      if (messageElem) {
        messageElem.textContent = message;
      }
    } else {
      // If no overlay exists yet, create one
      this.showLoadingOverlay(message);
    }
  }
  
  /**
   * Hides the loading overlay
   */
  hideLoadingOverlay() {
    if (this.loadingOverlay) {
      this.loadingOverlay.remove();
      this.loadingOverlay = null;
    }
  }

  /**
   * Display the summary in a modal overlay
   */
  showSummary(summary) {
    // Hide any loading overlay first
    this.hideLoadingOverlay();
    
    // Remove any existing summary modals
    const existingModal = document.getElementById('yoola-summary-modal');
    if (existingModal) {
      existingModal.remove();
    }

    // Create modal container
    const modal = document.createElement('div');
    modal.id = 'yoola-summary-modal';
    modal.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.7);
      z-index: 10000;
      display: flex;
      justify-content: center;
      align-items: center;
      font-family: Arial, sans-serif;
    `;

    // Create modal content
    const modalContent = document.createElement('div');
    modalContent.style.cssText = `
      background-color: white;
      padding: 20px;
      border-radius: 8px;
      max-width: 800px;
      max-height: 80vh;
      overflow-y: auto;
      position: relative;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    `;

    // Create close button
    const closeButton = document.createElement('button');
    closeButton.textContent = '×';
    closeButton.style.cssText = `
      position: absolute;
      top: 10px;
      right: 10px;
      background: none;
      border: none;
      font-size: 24px;
      cursor: pointer;
      color: #333;
    `;
    closeButton.addEventListener('click', () => modal.remove());
    modalContent.appendChild(closeButton);

    // Create title
    const title = document.createElement('h2');
    title.textContent = 'Terms of Service Summary';
    title.style.cssText = `
      margin-top: 0;
      color: #333;
      border-bottom: 1px solid #eee;
      padding-bottom: 10px;
    `;
    modalContent.appendChild(title);

    // Language selection
    const languageContainer = document.createElement('div');
    languageContainer.style.cssText = `
      margin-bottom: 15px;
      display: flex;
      align-items: center;
    `;
    
    const languageLabel = document.createElement('label');
    languageLabel.textContent = 'Summary Language: ';
    languageLabel.style.marginRight = '10px';
    
    const languageSelect = document.createElement('select');
    languageSelect.id = 'yoola-language-select';
    
    // These should match the languages in the README
    const languages = [
      { name: 'English', code: 'English' },
      { name: 'Spanish', code: 'Spanish' },
      { name: 'Russian', code: 'Russian' },
      { name: 'French', code: 'French' },
      { name: 'German', code: 'German' },
      { name: 'Italian', code: 'Italian' },
      { name: 'Mandarin Chinese', code: 'Mandarin Chinese' },
      { name: 'Hindi', code: 'Hindi' },
      { name: 'Portuguese', code: 'Portuguese' },
      { name: 'Japanese', code: 'Japanese' },
      { name: 'Korean', code: 'Korean' }
    ];
    
    languages.forEach(lang => {
      const option = document.createElement('option');
      option.value = lang.code;
      option.textContent = lang.name;
      languageSelect.appendChild(option);
    });
    
    // Get current language from the summary or storage
    const currentLang = summary.language || this.currentLanguage || 'English';
    languageSelect.value = currentLang;
    
    // Cache generation status info
    let generationInfo = '';
    if (summary.fromCache === false) {
      generationInfo = `<div style="font-size: 12px; color: #666; margin-top: 5px;">New summary generated in ${(summary.generationTime/1000).toFixed(1)}s</div>`;
    }
    const generationInfoElement = document.createElement('div');
    generationInfoElement.innerHTML = generationInfo;
    generationInfoElement.style.marginLeft = '10px';
    
    // Change language handler
    languageSelect.addEventListener('change', () => {
      const selectedLanguage = languageSelect.value;
      
      // Save preference
      chrome.storage.sync.set({ preferredLanguage: selectedLanguage });
      this.currentLanguage = selectedLanguage;
      
      // Show loading overlay
      this.hideLoadingOverlay();
      this.showLoadingOverlay(`Generating summary in ${selectedLanguage}...`);
      
      // Request new summary
      chrome.runtime.sendMessage({
        action: 'getSummaryInLanguage',
        language: selectedLanguage,
        domain: summary.domain,
        url: summary.url,
        content: summary.content
      }, (response) => {
        this.hideLoadingOverlay();
        if (response && response.summary) {
          // Update the modal with the new summary
          this.showSummary(response.summary);
        } else {
          // Show error but keep the current summary
          const errorElement = document.createElement('div');
          errorElement.style.cssText = `
            color: #e74c3c;
            padding: 10px;
            margin-top: 10px;
            background-color: #fadbd8;
            border-radius: 4px;
            text-align: center;
          `;
          errorElement.textContent = 'Error fetching summary in the selected language.';
          summaryContent.prepend(errorElement);
        }
      });
    });
    
    languageContainer.appendChild(languageLabel);
    languageContainer.appendChild(languageSelect);
    languageContainer.appendChild(generationInfoElement);
    modalContent.appendChild(languageContainer);

    // Create summary content
    const summaryContent = document.createElement('div');
    summaryContent.style.cssText = `
      line-height: 1.5;
    `;
    
    // Populate the summary content
    if (summary.error) {
      summaryContent.innerHTML = `<p>Error: ${summary.error}</p>`;
    } else {
      this.populateSummaryContent(summaryContent, summary);
    }
    
    modalContent.appendChild(summaryContent);

    // Add attribution
    const attribution = document.createElement('div');
    attribution.innerHTML = `
      <hr style="margin: 20px 0; border: none; border-top: 1px solid #eee;">
      <p style="text-align: center; color: #888; font-size: 12px;">
        Powered by Yoola AI Terms Summarizer
      </p>
    `;
    modalContent.appendChild(attribution);

    // Add modal to page
    modal.appendChild(modalContent);
    document.body.appendChild(modal);

    // Close on click outside
    modal.addEventListener('click', (event) => {
      if (event.target === modal) {
        modal.remove();
      }
    });

    // Close on escape key
    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape') {
        modal.remove();
      }
    }, { once: true });
  }

  /**
   * Populate the summary content in the modal
   */
  populateSummaryContent(container, summary) {
    // Clear previous content
    container.innerHTML = '';
    
    // Key points section
    const keyPointsSection = document.createElement('div');
    keyPointsSection.innerHTML = `
      <h3 style="color: #444;">Key Points</h3>
      <ul style="padding-left: 20px;"></ul>
    `;
    
    const keyPointsList = keyPointsSection.querySelector('ul');
    
    if (summary.key_points && summary.key_points.length > 0) {
      summary.key_points.forEach(point => {
        const li = document.createElement('li');
        li.textContent = point;
        li.style.marginBottom = '8px';
        keyPointsList.appendChild(li);
      });
    } else {
      keyPointsList.innerHTML = '<li>No key points available</li>';
    }
    
    container.appendChild(keyPointsSection);
    
    // Data collection section
    const dataSection = document.createElement('div');
    dataSection.innerHTML = `
      <h3 style="color: #444; margin-top: 20px;">Data Collection</h3>
      <p>${summary.data_collection_summary || 'No data collection information available'}</p>
    `;
    container.appendChild(dataSection);
    
    // User rights section
    const rightsSection = document.createElement('div');
    rightsSection.innerHTML = `
      <h3 style="color: #444; margin-top: 20px;">User Rights</h3>
      <p>${summary.user_rights_summary || 'No user rights information available'}</p>
    `;
    container.appendChild(rightsSection);
    
    // Alerts and warnings section
    const alertsSection = document.createElement('div');
    alertsSection.innerHTML = `
      <h3 style="color: #444; margin-top: 20px;">Alerts & Warnings</h3>
      <ul style="padding-left: 20px;"></ul>
    `;
    
    const alertsList = alertsSection.querySelector('ul');
    
    if (summary.alerts_and_warnings && summary.alerts_and_warnings.length > 0) {
      summary.alerts_and_warnings.forEach(alert => {
        const li = document.createElement('li');
        li.textContent = alert;
        li.style.marginBottom = '8px';
        li.style.color = '#d32f2f';
        alertsList.appendChild(li);
      });
    } else {
      alertsList.innerHTML = '<li>No alerts available</li>';
    }
    
    container.appendChild(alertsSection);
  }
}  // End of YoolaContentScript class definition

// Prevent duplicate initializations
if (typeof window.yoolaContent === 'undefined') {
  // Initialize the content script
  window.yoolaContent = new window.YoolaContentScript();
  console.log('Yoola content script initialized');
} else {
  console.log('Yoola content script already initialized');
}
